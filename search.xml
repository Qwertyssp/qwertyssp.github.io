<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[符号冲突问题]]></title>
      <url>/2017/08/17/symbol-multiple-definition/</url>
      <content type="html"><![CDATA[<p>最近项目中遇到的一个问题：项目需求增加功能B，为了尽快完成此功能，选择使用开源库，此库依赖于libpng.a。由于我们的软件只是整个工程架构中的一部分，原有的软件已经使用了libpng.a，但是版本未知。因此在最终编译的时候会产生符号冲突的问题。<br><a id="more"></a><br>最简单暴力的方法无非是手动替换所有编译时报错的函数名，但是，本来使用的就是开源库，符号冲突的数量是人工修改无法承担的。<br>后来咨询了下<a href="http://blog.gotocoding.com" title="周大神博客" target="_blank" rel="external">重归混沌</a>同学，大神给的意见是修改替换.o目标文件中的符号名，当然是使用脚本修改。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>C编译过程中，编译器和汇编器会将每个C文件编译成可重定位的目标文件，即我们通常所见的.o文件。此文件包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行的目标文件。<br>每一个可重定位的目标文件都包含一个符号表，它存放在程序中定义和引用的函数的和全局变量的信息，我们可以通过objdump工具列出所有符号。<br>实际上，在链接阶段，链接器完成符号解析之后，就把代码中的每个符号引用和确定的一个符号定义联系起来，此刻，连接器知道了输入目标模块中的代码节和数据节的确定大小，并开始重定位，即合并输入模块，并未每个符号分配运行时地址。</p>
<p>既然如此，我们便可以修改.o的符号名，并使用修改后的.o文件生成.a静态库，以达到目的。修改.o的符号名，我们使用objcopy这个工具完成。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>获取符号名，我们使用下面的一段lua脚本, 来获取所有的全局函数。<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--rename.lua</span></div><div class="line"><span class="keyword">local</span> list = &#123;&#125;</div><div class="line"><span class="keyword">local</span> reg = <span class="string">"([^%s]+)%s+([^%s]+)%s+([^%s]+)"</span>..</div><div class="line">        <span class="string">"%s+([^%s]+)%s+([^%s]+)%s+([^%s]+)"</span></div><div class="line"><span class="keyword">for</span> l <span class="keyword">in</span> io.<span class="built_in">stdin</span>:<span class="built_in">lines</span>() <span class="keyword">do</span></div><div class="line">        <span class="keyword">local</span> a,b,c,d,e,f = string.match(l, reg)</div><div class="line">        <span class="keyword">if</span> a <span class="keyword">and</span> c == <span class="string">"F"</span> <span class="keyword">and</span> b == <span class="string">"g"</span> <span class="keyword">then</span></div><div class="line">                list[#list + <span class="number">1</span>] = <span class="string">" --redefine-sym "</span></div><div class="line">                list[#list + <span class="number">1</span>] = string.format(<span class="string">"%s=%s_avit"</span>, f, f)</div><div class="line">        <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"#/bin/sh"</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"objcopy "</span> .. table.concat(list) .. <span class="string">" $1"</span>)</div></pre></td></tr></table></figure></p>
<p>我们使用如下命令来手机所有的.o文件的F符号，并产生修改符号所用的脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &apos;*.o&apos; | xargs objdump -t | ./lua rename &gt; rename.sh</div></pre></td></tr></table></figure></p>
<p>再使用下面的命令，就可以把所有的函数名增加一个avit后缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &apos;*.o&apos; | xargs -n 1 sh ./rename.sh</div></pre></td></tr></table></figure></p>
<p>当然，其他平台我们需要使用其平台的SDK所提供的objcopy以及objdump来进行修改。<br>至此，我们将所有.o文件的函数名已经修改，只要我们使用这些.o文件再次生成.a文件，就可将其放入工程进行使用。</p>
<p>后来研究<a href="http://blog.csdn.net/xasylt/article/details/46712765" title="符号冲突问题解决" target="_blank" rel="external">其他博文</a>发现，似乎也可以通过nm工具来替代objdump工具来获取符号名。</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个有意思的BUG]]></title>
      <url>/2017/05/21/c-array-point/</url>
      <content type="html"><![CDATA[<p>如果你对C的指针和数组非常了解，就没必要往下看了。否则，还是建议花两分钟看下: )<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* a.c */</span></div><div class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">////////////////////////////</span></div><div class="line"><span class="comment">/* b.c */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> *p;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">b</span> <span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, p[<span class="number">0</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">////////////////////////////</span></div><div class="line"><span class="comment">/* main.c */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"a.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	a();</div><div class="line">	b();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>代码很简单，请仔细阅读，然后回答我的两个问题</p>
<ul>
<li><p>问题1：这段代码输出什么？</p>
<blockquote>
<p>如果你认为是1，那么恭喜你，今天你又要学到新的东西了。<br>  正确答案是编译运行后是<strong>”segmentation fault“</strong> :(, oh no, WTF!!!</p>
</blockquote>
</li>
<li><p>问题2: 为什么会这样？</p>
<blockquote>
<p>原因就在与：数组和指针并不相同。</p>
</blockquote>
</li>
</ul>
<p>虽然初出茅庐的时候就知道数组与指针的差异，但还是在被某位大神鄙视后，也没有醒悟。</p>
<h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY !!!???"></a>WHY !!!???</h2><p>我们首先需要明白两个问题</p>
<ul>
<li><p>区分定义和声明<br>声明相当于普通的声明：它所说明的并非自身，而是描述其他地方的创建的对象.<br>定义相当于特殊的声明：它为对象分配内存.</p>
</li>
<li><p>指针与数组的区别之一<br>指针间接访问数据，首先取得指针的内容，把它作为地址，然后从这个地址提取数据.<br>数组直接访问数据，a[i]只是简单的以a+i为地址取得数据.</p>
</li>
</ul>
<p>那么当我在b.c以extern int *p,然后用p[0]来引用其中的元素时，编译器做了什么呢？</p>
<ol>
<li>取得符号表中p的地址，提取存储在此处的指针</li>
<li>把下表所表示的偏移量与指针的值想家，产生一个地址。</li>
<li>访问上面这个地址，取得字符。</li>
</ol>
<p>也就是说当用p[i]这种形式提取这个声明的内容时，编译器却把他当成了一个指针，把1解释为地址显然是不对的</p>
<h2 id="我们应当怎么做"><a href="#我们应当怎么做" class="headerlink" title="我们应当怎么做"></a>我们应当怎么做</h2><p>指针的外部声明与数组定义不匹配的问题很容易修正，只要修改声明，使之与定义相匹配即可。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file1</span></div><div class="line"><span class="keyword">int</span> a[<span class="number">100</span>]</div><div class="line"></div><div class="line"><span class="comment">//file2</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a[];</div></pre></td></tr></table></figure></p>
<p>这里只是简单剖析了下这个问题，也算是一个记录，如果想深入了解，建议还是看下<em>C专家编程</em>这本书</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[New Start]]></title>
      <url>/2017/03/27/new-start/</url>
      <content type="html"><![CDATA[<p>之前写过一些blog，但是零零散散，其实也没什么质量可言，又因为工作原因，时常没有心情想去整理。</p>
<p>由于最近在看一些技术博客，收益颇丰，所以决定重新写Blog，之前的文章就有时间再同步过来吧。</p>
<blockquote>
<p>希望这次可以坚持:)</p>
</blockquote>
<p><img src="bird.jpeg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
